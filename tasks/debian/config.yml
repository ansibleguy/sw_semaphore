---

- name: Semaphore | Config | ansible.cfg
  ansible.builtin.copy:
    content: |
      # ansible_managed
      {% for section, config in SEM_CONFIG.ansible_config.items() %}

      [{{ section }}]
      {%   for key, value in config.items() %}
      {{ key }} = {{ value }}
      {%   endfor %}
      {% endfor %}
    dest: "{{ SEM_HC.home }}/ansible.cfg"
    mode: 0640
    owner: 'root'
    group: "{{ SEM_HC.user }}"
  when: SEM_CONFIG.manage.ansible_cfg | bool

# NOTE: pulling existing config to keep secrets that were auto-generated
- name: Semaphore | Config | Pulling current config
  ansible.builtin.command: "cat {{ SEM_HC.config }}"
  register: sem_cur_cnf
  changed_when: false
  check_mode: false
  no_log: true
  failed_when:
    - sem_cur_cnf.failed
    - "'No such file or directory' not in sem_cur_cnf.stderr"

- name: Semaphore | Config | Generate secrets
  when: sem_cur_cnf.stdout | default(none, true) is none
  connection: local
  become: false
  block:
    - name: Semaphore | Config | Generate 'cookie_hash'
      ansible.builtin.shell: |
        set -o pipefail
        head -c32 /dev/urandom | base64
      no_log: true
      args:
        executable: '/bin/bash'
      register: sem_rawsec_ch
      changed_when: false

    - name: Semaphore | Config | Generate 'cookie_encryption'
      ansible.builtin.shell: |
        set -o pipefail
        head -c32 /dev/urandom | base64
      no_log: true
      args:
        executable: '/bin/bash'
      register: sem_rawsec_ce
      changed_when: false

    - name: Semaphore | Config | Generate 'access_key_encryption'
      ansible.builtin.shell: |
        set -o pipefail
        head -c32 /dev/urandom | base64
      no_log: true
      args:
        executable: '/bin/bash'
      register: sem_rawsec_ke
      changed_when: false

- name: Semaphore | Config | Writing config
  ansible.builtin.template:
    src: 'templates/etc/semaphore/config.json.j2'
    dest: "{{ SEM_HC.config }}"
    owner: 'root'
    group: "{{ SEM_HC.user }}"
    mode: 0640
  no_log: true
  vars:
    # config for managed db
    cnf_db: "{{ SEM_CONFIG.database }}"
    # config now
    cnf_n: "{{ SEM_CONFIG.config }}"
    # config before
    cnf_b: "{{ sem_cur_cnf.stdout | default('{}', true) | from_json }}"
    # generated secrets (first time)
    cnf_g:
      cookie_hash: "{{ sem_rawsec_ch.stdout | default('') }}"
      cookie_encryption: "{{ sem_rawsec_ce.stdout | default('') }}"
      access_key_encryption: "{{ sem_rawsec_ke.stdout | default('') }}"
  notify: Sem-restart
